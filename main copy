package main

import (
	"fmt"
	"kademlia/internal/address"
	. "kademlia/internal/kademliaid"
	"kademlia/internal/node"
	"net"
	"os"
	"time"
)

func getDistance(NodeA []byte, NodeB []byte) KademliaID {
	result := KademliaID{}
	for i := 0; i < IDLength; i++ {
		result[i] = NodeA[i] ^ NodeB[i]
	}
	return result
}

func getHostIP() string {
	addresses, err := net.InterfaceAddrs()
	if err != nil {
		panic("get good")
	}
	for _, address := range addresses {

		// check the address type and if it is not a loopback the display it
		if ipnet, ok := address.(*net.IPNet); ok && !ipnet.IP.IsLoopback() {
			if ipnet.IP.To4() != nil {
				return ipnet.IP.String()
			}
		}
	}
	return ""
}

func main() {

	host, err := os.Hostname()
	fmt.Println(err)
	ip := getHostIP()
	fmt.Println("Starting Node" + host + "ip:" + ip)
	node := node.Node{}
	addr := address.New("127.0.0.1:1234")
	node.Init(addr)

	for {

		fmt.Println(node)
		//fmt.Println(node.RoutingTable.GetContacts())
		time.Sleep(time.Second * 2)
	}
}

/*
// Basic test function for constantly pinging the supernode
func sendLoop() {
	networkPrefix1, _ := strconv.Atoi(strings.Split(network.NetInfo.LocalIPAddr.String(), ".")[0])
	networkPrefix2, _ := strconv.Atoi(strings.Split(network.NetInfo.LocalIPAddr.String(), ".")[1])

	// Construct supernode address (xxx.xxx.0.2)
	supernodeAddr := net.IPv4(byte(networkPrefix1), byte(networkPrefix2), 0, 2)
	for {
		// Forever ping the supernode
		network.SendPing(supernodeAddr)
		time.Sleep(time.Second * 3)
	}
}
*/
